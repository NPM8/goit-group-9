{"mappings":"AAuBA,MAAMA,KAAO,CACT,2BACA,mCACA,qBACA,iCACA,mBACA,4BAKJ,IAAIC,OAAS,GAGb,IAAK,IAAIC,EAAQ,EAAEA,EAAQF,KAAKG,OAAQD,IAAS,CAE7C,MAAME,EAAUJ,KAAKE,GACrBG,QAAQC,IAAIN,KAAKE,IAGjB,MAAMK,EAAQ,CAEVH,EAAQI,MAAM,EAAGJ,EAAQD,OAAS,GAGlCC,EAAQI,MAAMJ,EAAQD,OAAS,GAAGM,MAAM,KAI5C,IAAK,IAAIC,EAAY,EAAGA,EAAYH,EAAM,GAAGJ,OAAQO,IAAa,CAE9D,MAAMC,EAAaJ,EAAM,GAAGG,GAG5B,GAAIH,EAAM,GAAGK,SAASD,GAAa,CAE/BV,QAAUU,EAGV,KACJ,CAEJ,CAIIV,OAAOE,OAASD,EAAQ,IAAGD,QAAU,IAE7C,CAGAI,QAAQC,IAAIL","sources":["class_3/js/zadanie.js"],"sourcesContent":["/*\nFirma XYZ przechowuje swoje dane w postaci ciągów znaków. Niestety,\nz powodu awarii systemu, część danych została uszkodzona.Aby odzyskać\njak najwięcej informacji, potrzebujesz napisać program, który\nprzyjmuje tablicę ciągów znaków jako argument i zwraca znak,który \njest wspólny dla połowy danego ciągu znaków w tablicy,a następnie \nłączy wszystkie te znaki w jeden string przy czym jeśli jakiś\nciąg nie ma części wspólnej to zwraca on \" \". Ciągi znaków mogą być\ndługości parzystej (długość n % 2 == 0). Wiemy także z analizy\nże tylko pojedyncze znaki w ciągach zostały zamienione.\n\nExample:\n\nconst data = [\n    \"aaaaaabbbabb\",\n    \"aaaaaabbbbbb\",\n    \"aabaaabbbbbb\",\n];\n\nOutput: \"a b\"\n\n*/\n\nconst data = [\n    \"vJrwpWtwJgWrhcsFMMfFFhFp\",\n    \"jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL\",\n    \"PmmdzqPrVvPwwTWBwg\",\n    \"wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn\",\n    \"ttgJtRGJQctTZtZT\",\n    \"CrZsJsPPZsGzwwsLwLmpwMDw\",\n]\n\n// Output: \"pLPvts\"\n\nlet output = \"\";\n\n// Dla każdego ciągu znaków w tablicy\nfor (let index = 0;index < data.length; index++) {\n    // Wybierz ciąg znaków z tablicy\n    const element = data[index];\n    console.log(data[index]);\n\n    // Podziel ciąg znaków na połowe\n    const halfs = [\n        // pierwsza połowa zostaje w formie ciągu znaków\n        element.slice(0, element.length / 2),\n        // drugą połowę zmieniamy na forme tablicy z pojedynczymi\n        // znakami za pomocą metody split('')\n        element.slice(element.length / 2).split('')\n    ];\n\n    // Dla każdego znaku w pierwszej połowie\n    for (let indexHalf = 0; indexHalf < halfs[0].length; indexHalf++) {\n        // wybierz znak,\n        const actualElem = halfs[0][indexHalf];\n\n        // sprawdź czy znak występuje w drugiej połowie,\n        if (halfs[1].includes(actualElem)) {\n            // jeśli tak to dodaj go do outputu.\n            output += actualElem;\n            // Następnie przerwij wykonywanie pętli bo może być tylko \n            // jeden znak\n            break;\n        }\n\n    }\n\n    // Jeśli nie znaleziono wspólnego znaku w pierwszej połowie,\n    // dodajemy spację do outputu.\n    if (output.length < index + 1) output += \" \";\n\n}\n\n// Wypisujemy output\nconsole.log(output); // \"pLPvts\"\n"],"names":["data","output","index","length","element","console","log","halfs","slice","split","indexHalf","actualElem","includes"],"version":3,"file":"zadanie.fbdf6833.js.map"}